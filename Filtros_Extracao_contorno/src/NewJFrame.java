/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author ionildo
 */
import java.awt.image.BufferedImage;
import java.io.*;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.filechooser.*;

public class NewJFrame extends javax.swing.JFrame {
     BufferedImage imagem1, imagemAuxiliar;
     int flag=0;
   
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemFiltroMediana = new javax.swing.JMenuItem();
        jMenuItemExtracaoContorno = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("Arquivo");

        jMenuItem1.setLabel("Abrir...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setLabel("Salvar...");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setLabel("Sair");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Imagem");

        jMenuItemFiltroMediana.setText("Filtro Mediana");
        jMenuItemFiltroMediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFiltroMedianaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemFiltroMediana);

        jMenuItemExtracaoContorno.setText("Extracao Contorno");
        jMenuItemExtracaoContorno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExtracaoContornoActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemExtracaoContorno);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 400, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 279, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG, PNG & GIF Images", "jpg", "png", "gif");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Abrir Imagem");
        int op = chooser.showOpenDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try { 
                  //carrega nova imagem
                  imagem1 = ImageIO.read(new File(path));
                  System.out.println("Arquivo aberto com sucesso!");
                  ImageIcon icon = new ImageIcon(imagem1);
                  if (flag==0) {
                      jLabel1.setIcon(icon);
                      Container contentPane = getContentPane();
                      contentPane.setLayout(new GridLayout());
                      contentPane.add(new JScrollPane(jLabel1));
                      flag=1;
                  }
                  else jLabel1.setIcon(icon);
                  setSize(imagem1.getWidth()+25, imagem1.getHeight()+70);
	    }
	    catch(IOException e){
		System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
	    }
	    catch(Exception e){
		System.out.println("Erro Exception! " + e.getMessage());
	    }                   
        }  
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.exit(1);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("JPG Images", "jpg");
        chooser.setFileFilter(filter);
        chooser.setDialogTitle("Salvar Imagem");
        int op = chooser.showSaveDialog(this);
        if(op == JFileChooser.APPROVE_OPTION){  
            File arq = chooser.getSelectedFile();  
            String path = arq.toString();  
            try {
		ImageIO.write(imagem1,"jpg",new File(path));
		System.out.println("Arquivo salvo com sucesso!");
		}
		catch(IOException e){
			System.out.println("Erro IO Exception! Verifique se o arquivo especificado existe e tente novamente.");
		}
		catch(Exception e){
			System.out.println("Erro Exception! " + e.getMessage());
		}
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItemExtracaoContornoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExtracaoContornoActionPerformed
//               
//                imagemAuxiliar = imagem1;
//                
//                int width = imagem1.getWidth();
//        	int height = imagem1.getHeight();
//                int pixel; 
//                
//        	for (int i = 1; i < (width - 1); i++) {
//                    for (int j = 1; j < (height - 1); j++) { 				
//                        Color cor = new Color(imagem1.getRGB(i, j));
//                        pixel = (int) cor.getRed() ;
//                        
//                        if ()
//                        
//                        
//                        
//                        Color color = new Color(pixel, g, b);
//                        imagemAuxiliar.setRGB(i, j, color.getRGB());
////                        int r = 255 - (int)((rgb&0x00FF0000)>>>16);
////        		int g = 255 - (int)((rgb&0x0000FF00)>>>8);
////        		int b = 255 - (int) (rgb&0x000000FF);
//        		Color color = new Color(r, g, b);
//        		imagem1.setRGB(i, j, color.getRGB());
//        	    }
//                }
//                this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
//


//        int width = imagem1.getWidth();
//	int height = imagem1.getHeight();
//	for (int i = 0; i < width; i++) {
//            for (int j = 0; j < height; j++) { 				
//                int rgb = imagem1.getRGB(i, j); 				//a cor inversa Ã© dado por 255 menos o valor de cada canal 				
//                int r = 255 - (int)((rgb&0x00FF0000)>>>16);
//		int g = 255 - (int)((rgb&0x0000FF00)>>>8);
//		int b = 255 - (int) (rgb&0x000000FF);
//		Color color = new Color(r, g, b);
//		imagem1.setRGB(i, j, color.getRGB());
//	    }
//        }
//        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);

    }//GEN-LAST:event_jMenuItemExtracaoContornoActionPerformed

    public void escalaDeCinza(){
        int width = imagem1.getWidth();
        int height = imagem1.getHeight();
        int y = 0;
        Color color = null;
        
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < height; j++) {
                color = new Color(imagem1.getRGB(i, j));
                y = (int) ((0.299 * color.getRed()) + (0.587 * color.getGreen()) + 
                    (0.1147 * color.getBlue()));
                
                color = new Color(y, y, y);
                imagem1.setRGB(i, j, color.getRGB());
            }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    }
    private void jMenuItemFiltroMedianaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFiltroMedianaActionPerformed
        
        int width = imagem1.getWidth(),
        height = imagem1.getHeight();
        Color color = null;
    
//        Mask operations are usually done on gray scale imagem1s
        this.escalaDeCinza();
        
        ArrayList<Color> list= new ArrayList<>();
        
//        Skip borders
	for (int i = 1; i < (width - 1); i++) {
            for (int j = 1; j < (height - 1); j++) { 
                color = new Color (imagem1.getRGB(i, j));
                list.clear();
                
//                Add 3x3 mask pixels
                list.add (new Color(imagem1.getRGB(i-1, j-1)));
                list.add (new Color(imagem1.getRGB(i-1, j)));
                list.add (new Color(imagem1.getRGB(i-1, j+1)));
                list.add (new Color(imagem1.getRGB(i, j-1)));
                list.add (new Color(imagem1.getRGB(i, j)));
                list.add (new Color(imagem1.getRGB(i, j+1)));
                list.add (new Color(imagem1.getRGB(i+1, j-1)));
                list.add (new Color(imagem1.getRGB(i+1, j)));
                list.add (new Color(imagem1.getRGB(i+1, j+1)));
                
//                Sort mask pixels
                Collections.sort (list, new Comparator<Color>() {

                    @Override
                    public int compare(Color color1, Color color2) {
                        if (color1.getRGB() < color2.getRGB()) {
                            return -1;
                        }
                        else {
                            if (color1.getRGB() == color2.getRGB()) {
                                return 0;
                            }
                            else {
                                return 1;
                            }
                        }
                    }
                });
            
                imagem1.setRGB (i, j, list.get(4).getRGB());
	    }
        }
        this.imageUpdate(imagem1, ALLBITS, 0, 0, width, height);
    
        
    }//GEN-LAST:event_jMenuItemFiltroMedianaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItemExtracaoContorno;
    private javax.swing.JMenuItem jMenuItemFiltroMediana;
    // End of variables declaration//GEN-END:variables
}
